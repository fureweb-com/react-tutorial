{"version":3,"sources":["components/TodoListTemplate.js","components/Form.js","components/TodoItem.js","components/TodoItemList.js","components/Color.js","components/Palette.js","App.js","serviceWorker.js","index.js"],"names":["TodoListTemplate","palette","form","children","className","Form","value","onChange","onCreate","onKeyPress","onClick","getCurrentColor","colors","find","color","selected","hex","TodoItem","nextProps","this","props","checked","text","id","onToggle","onRemove","e","stopPropagation","style","Component","TodoItemList","todos","todoList","map","todo","key","Color","onColorChange","name","backgroundColor","Palette","palettes","hasDuplicatedText","some","App","state","input","clearInput","setState","handleChange","target","handleCreate","concat","handleKeyPress","handleToggle","index","findIndex","nextTodos","handleRemove","filter","handleColorChange","Object","assign","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9d074a5c.chunk.js","sourcesContent":["import React from 'react'\nimport './TodoListTemplate.css'\n\nconst TodoListTemplate = ({ palette, form, children }) => {\n  return (\n    <main className=\"todo-list-template\">\n      <div className=\"title\">\n        오늘 할 일\n      </div>\n      <section className=\"palette-wrapper\">\n        { palette }\n      </section>\n      <section className=\"form-wrapper\">\n        { form }\n      </section>\n      <section className=\"todos-wrapper\">\n        { children }\n      </section>\n    </main>\n  )\n}\n\nexport default TodoListTemplate\n","import React from 'react';\nimport './Form.css';\n\nconst Form = ({value, onChange, onCreate, onKeyPress}) => {\n  return (\n    <div className=\"form\">\n      <input value={value} onChange={onChange} onKeyPress={onKeyPress}/>\n      <div className=\"create-button\" onClick={onCreate}>\n        추가\n      </div>\n    </div>\n  );\n};\n\nexport default Form;","import React, { Component } from 'react';\nimport './TodoItem.css';\n\nconst getCurrentColor = (colors) => colors.find(color => color.selected)?.hex\n\nclass TodoItem extends Component {\n  shouldComponentUpdate(nextProps) {\n    return this.props.checked !== nextProps.checked;\n  }\n\n  render() {\n    const { colors, text, checked, id, onToggle, onRemove } = this.props;\n\n    return (\n      <div className=\"todo-item\" onClick={() => onToggle(id)}>\n        <div className=\"remove\" onClick={(e) => {\n          e.stopPropagation(); // onToggle 이 실행되지 않도록 함\n          onRemove(id)}\n        }>&times;</div>\n        <div className={`todo-text ${checked && 'checked'}`}>\n          <div style={{ color: getCurrentColor(colors) }}>{text}</div>\n        </div>\n        {\n          checked && (<div className=\"check-mark\">✓</div>)\n        }\n      </div>\n    );\n  }\n}\n\nexport default TodoItem;\n","import React, { Component } from 'react';\nimport TodoItem from './TodoItem';\n\nclass TodoItemList extends Component {\n  shouldComponentUpdate(nextProps) {\n    return this.props.todos !== nextProps.todos;\n  }\n\n  render() {\n    const { todos, colors, onToggle, onRemove } = this.props;\n    const todoList = todos.map((todo) => (\n      <TodoItem\n        {...todo}\n        colors={colors}\n        onToggle={onToggle}\n        onRemove={onRemove}\n        key={todo.id}\n      />\n    ))\n    return (\n      <div>\n        { todoList }\n      </div>\n    );\n  }\n}\n\nexport default TodoItemList;\n","import React, { Component } from 'react';\nimport './Color.css'\n\nclass Color extends Component {\n  render() {\n    const { color, onColorChange } = this.props\n\n    return (\n      <div\n        className={`color ${color.name} ${color.selected ? 'active' : ''}`}\n        style={{backgroundColor: color.hex}}\n        onClick={() => onColorChange(color.name)}\n      />\n    )\n  }\n}\n\nexport default Color\n","import React, { Component } from 'react';\nimport Color from './Color'\nimport './Palette.css'\n\nclass Palette extends Component {\n  shouldComponentUpdate(nextProps) {\n    return this.props.colors !== nextProps.colors\n  }\n\n  render() {\n    const { colors, onColorChange } = this.props\n\n    const palettes = colors.map((color) => <Color color={color} key={color.name} onColorChange={onColorChange}/>)\n\n    return (\n      <div className=\"palette\">\n        {palettes}\n      </div>\n    )\n  }\n}\n\nexport default Palette;\n","import React, { Component } from 'react'\nimport TodoListTemplate from './components/TodoListTemplate'\nimport Form from './components/Form'\nimport TodoItemList from './components/TodoItemList'\nimport Palette from './components/Palette'\n\nconst hasDuplicatedText = (todos, text) => {\n  return todos.some(todo => todo.text === text)\n}\n\nclass App extends Component {\n  id = 3 // 이미 0,1,2 가 존재하므로 3으로 설정\n\n  state = {\n    input: '',\n    colors: [\n      { name: 'black', hex: '#343a40', selected: true },\n      { name: 'red', hex: '#f03e3e', selected: false },\n      { name: 'green', hex: '#12b886', selected: false },\n      { name: 'blue', hex: '#228ae6', selected: false },\n    ],\n    todos: [\n      { id: 0, text: 'Hello react!', checked: true },\n      { id: 1, text: 'https://fureweb-com.github.io', checked: false },\n      { id: 2, text: '리액트 처음 해본 날!', checked: false }\n    ]\n  }\n\n  clearInput = () => {\n    this.setState({ input: '' })\n  }\n\n  handleChange = (e) => {\n    this.setState({\n      input: e.target.value // input 의 다음 바뀔 값\n    });\n  }\n\n  handleCreate = () => {\n    const { input: text, todos } = this.state;\n    if (!text) return\n\n    // 동일한 text가 존재하는지 확인 후 초기화\n    if (hasDuplicatedText(todos, text)) return this.clearInput()\n\n    this.setState({\n      input: '', // 인풋 비우고\n      // concat 을 사용하여 배열에 추가\n      todos: todos.concat({\n        id: this.id++,\n        text,\n        checked: false\n      })\n    });\n  }\n\n  handleKeyPress = (e) => {\n    // 눌려진 키가 Enter 면 handleCreate 호출\n    if(e.key === 'Enter') {\n      this.handleCreate();\n    }\n  }\n\n  handleToggle = (id) => {\n    const { todos } = this.state;\n\n    // 파라미터로 받은 id 를 가지고 몇번째 아이템인지 찾습니다.\n    const index = todos.findIndex(todo => todo.id === id);\n    const selected = todos[index]; // 선택한 객체\n\n    const nextTodos = [...todos]; // 배열을 복사\n\n    // 기존의 값들을 복사하고, checked 값을 덮어쓰기\n    nextTodos[index] = { \n      ...selected, \n      checked: !selected.checked\n    };\n\n    this.setState({\n      todos: nextTodos\n    });\n  }\n\n  handleRemove = (id) => {\n    const { todos } = this.state;\n    this.setState({\n      todos: todos.filter(todo => todo.id !== id)\n    });\n  }\n\n  handleColorChange = (name) => {\n    // 모두 false로 만든 뒤 조건에 맞는 색상만 selected로 추가\n    const colors = this.state.colors.map(color => Object.assign(color, { selected: false }, color.name === name ? { selected: true } : {}))\n    this.setState({ colors })\n  }\n\n  render() {\n    const { input, todos, colors } = this.state;\n    const {\n      handleChange,\n      handleCreate,\n      handleKeyPress,\n      handleToggle,\n      handleRemove,\n      handleColorChange\n    } = this;\n\n    return (\n      <TodoListTemplate palette={<Palette colors={colors} onColorChange={handleColorChange}/>} form={\n        <Form\n          value={input}\n          onKeyPress={handleKeyPress}\n          onChange={handleChange}\n          onCreate={handleCreate}\n        />\n      }>\n        <TodoItemList todos={todos} colors={colors} onToggle={handleToggle} onRemove={handleRemove}/>\n      </TodoListTemplate>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}